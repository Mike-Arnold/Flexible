

what didn't work
	only consider one of each edge class
	keeping track of possible edges
	sort targets by possibility and edge class
	finding original class counts and requiring rarest classes first
	
what did work
	switching between preferring near and far edges
	iterating to a non-decreasing target list
	identifying minimum depth
	classwise maximum depth
	switching off between reverse and negate (target list iteration strategies)
	in addition to reverse and negate, try a random target list
	require equivalent classes to never take greater label than they already have (non-random strat only)
	

insert graph of iter mods tested
	iteration mod.png
insert pic of cases where near is better, and where far is better
	tree 2734, using far solved in 425, near solved in 1.3 million
	tree 2717, using near solved in 1783, far solved in 586 thousand
	113 cases where near is better
	3240 cases with less than 1000 iteration difference
	743 cases where far is better
insert pic of cases where reverse is better, and where negate is better
	tree 1767, using reverse solves in 2259, slightly faster than 2694 using all 3 strats
	tree 1780, using negate solves in 2748, using all three is slowest with 6313
	tree 3448, allowing random gives 1735 iterations instead of 112269 with just switching
rule out bad edge classes and/or ignore all dupes
	tree 1531 solves in 3973 iterations, takes almost 7 million without considering edge class
insert pic of case where minimum depth helps
	tree 3080, using depth=0 is 6625 iterations faster than actual min depth
	tree 3451, using actual minimum depth is 22234 iterations faster than depth=0
insert pic of case where classwise depth helps
	tree 3080, using naive depth is 3427 iterations faster than using classwise depth
	tree 1760, using classwise depth is 35287 iterations faster than using naive depth


journals to publish in
	Discrete Applied Mathematics - Anick - 2830
	Electronic Journal of Combinatorics - big survey - free
	Electronic Journal of Graph Theory & Applications - survey of algorithms - 200

to do:
	
	try varying the long example so it isn't always 3 per line
	9
	10 11 12 13
	14 15
	16 17
	18 19 20
	21 22 23
	
	section 8
		write new conclusions/summary
	note no relationship in inherited roots
	note simple proofs that leafs inherit
	find more relationships in 'no skipping' results
	write appendix
		algorithm to generate graceful scorpions
		mention nextree algorithm somewhere
		show backtrack function code
		
	make it more mathy!

	run all the tests again but for 4096 canon trees

	rename "Flexible Backtrack" to "Flexible Edge Search" ?
	rename scorpion to scorpio ?
	
	mention the name "class D" for scorpions with stingers with no tails
		D' for scorpions with tails

van bussel
https://www.sciencedirect.com/science/article/pii/S0012365X03001523#aep-section-id40
anick
https://www.sciencedirect.com/science/article/pii/S0166218X15002814#br000040


random thoughts
	what if a tree is almost alpha but the 1-edge is out of place
	edge search but start with the middle node label - find where it fails
		floor(n/2) - ubiquitous
	take an alpha labeling and try to rotate its adjacency matrix
	cordial (label with 0s and 1s) - extend to 0,1,2?, induction?